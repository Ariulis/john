@import "vars.scss";

// adaptive value

@mixin adaptive-value($property, $startSize, $minSize, $type: 0) {
  $addSize: $startSize - $minSize;
  @if $type == 1 {
    #{$property}: $startSize + px;
    @media (max-width: #{$maxWidthContainer + px}) {
      #{$property}: calc(
        #{$minSize + px} + #{$addSize} *
          ((100vw - 320px) / #{$maxWidthContainer - 320})
      );
    }
  } @else if $type == 2 {
    #{$property}: $startSize + px;
    @media (min-width: #{$maxWidthContainer + px}) {
      #{$property}: calc(
        #{$minSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidth - 320})
      );
    }
  } @else {
    #{$property}: calc(
      #{$minSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidth - 320})
    );
  }
}

// fonts

@mixin font-face($font-name, $path, $weight: normal, $style: normal) {
  @font-face {
    font-family: quote($font-name);
    src: url(#{$path}.woff) format("woff"), url(#{$path}.woff2) format("woff2"),
      url(#{$path}.ttf) format("truetype");
    font-weight: $weight;
    font-style: $style;
    font-display: swap;
  }
}

// Responsive font

@mixin r-font($pcSize, $mobSize) {
  $addSize: $pcSize - $mobSize;
  $addMobSize: $addSize + $addSize * 0.7;
  @media (max-width: 767px) {
    font-size: calc(
      #{$mobSize + px} + #{$addMobSize} * ((100vw - 320px) / #{$maxWidth})
    );
  }
  @media (min-width: 767px) {
    font-size: calc(#{$mobSize + px} + #{$addSize} * (100vw / #{$maxWidth}));
  }
}

// Block

@mixin box($width, $height: $width) {
  width: $width;
  height: $height;
}

// Background cover

@mixin cover-background($url) {
  background-image: url($url);
  background-repeat: no-repeat;
  background-size: cover;
  background-position: center;
}

$units: 1px !default;
@mixin screen($res-first, $res-last: $res-first) {
  @if $res-first == $res-last {
    @media screen and (max-width: if(unitless($res-first), ($res-first - 1) *$units, $res-first)) {
      @content;
    }
  } @else if $res-first < $res-last {
    @media screen and (min-width: if(unitless($res-first), $res-first*$units, $res-first)) and (max-width: if(unitless($res-last), $res-last*$units, $res-last)) {
      @content;
    }
  }
}
@mixin min-screen($res) {
  @media screen and (min-width: if(unitless($res), $res*$units, $res)) {
    @content;
  }
}
